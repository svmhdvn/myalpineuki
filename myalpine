#!/bin/sh

set -eux

_MYKERNELMAKE() {
  KBUILD_BUILD_TIMESTAMP='' nice make -f "${linux_src}/Makefile" O="${obj}" CC='ccache cc' KCFLAGS="${KCFLAGS}" "$@"
}

uncompress_firmware() {
  # TODO file ticket for upstream aports to split intel-ucode
  # TODO figure this out properly with hostname
  #if test "${intel_ucode}" -eq 1; then
    mkdir -p "${fw_dest}/intel-ucode"
    iucode_tool \
      --scan-system \
      --list \
      --write-firmware="${fw_dest}/intel-ucode" \
      --overwrite \
      -tr /boot/intel-ucode.img
  #fi
  (
    . "${obj}/.config"
    for fz in ${CONFIG_EXTRA_FIRMWARE}; do
      mkdir -p "${fw_dest}/$(dirname "${fz}")"
      if test -e "/lib/firmware/${fz}.zst"; then
        zstd -df "/lib/firmware/${fz}.zst" -o "${fw_dest}/${fz}"
      elif test -e "/lib/firmware/${fz}"; then
        cp "/lib/firmware/${fz}" "${fw_dest}/${fz}"
      elif test -e "${fw_dest}/${fz}"; then
        echo "Found pre-existing firmware '${fw_dest}/${fz}', skipping." >&2
      else
        echo "ERROR: could not find source for '${fz}', please locate!" >&2
        exit 1
      fi
    done
  )
}

# TODO automatically git commit and push to ~/src/dotfiles/kernel_configs
build_kernel() {
  if ! test -d "${linux_src}"; then
    mkdir -p "${linux_src}"
    git clone \
      --depth=1 \
      --branch="v${version}" \
      'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git' \
      "${linux_src}"

    echo "MANDATORY: please install '${obj}/.config' to continue!" >&2
    exit 0
  fi

  curver="$(_MYKERNELMAKE -s kernelversion)"
  if test "${version}" != "${curver}"; then
    git -C "${linux_src}" fetch --depth=1 origin tag "v${version}"
    git -C "${linux_src}" switch --detach "v${version}"
    _MYKERNELMAKE oldconfig
  fi

  echo "SIVA: building kernel with KCFLAGS='${KCFLAGS}'"
  uncompress_firmware
  _MYKERNELMAKE -j"$(nproc)"
  cp "${obj}/.config" "${HOME}/src/dotfiles/kernel_configs/${host}_${version}.config"

  mkdir -p "${out}"
  cp "${bzImage}" "${out}/bootx64.efi"
}

build_initramfs() {
  doas rm -rf "${rootfs}"
  mkdir -p "${build}"

  # Stop mkinitfs from running during apk install.
  doas mkdir -p "${rootfs}/etc/mkinitfs"
  echo disable_trigger=yes | doas tee "${rootfs}/etc/mkinitfs/mkinitfs.conf"

  # TODO write a useful date here
  date -u '+%Y-%m-%dT%H:%M:%SZ' | doas tee "${rootfs}/etc/myalpine-release"

  pkgs="$(cat common_packages.txt "${host_pkgs}" | grep -v -e '^[ \t]*#' -e '^[ \t]*$')"
  doas alpine-make-rootfs \
    --fs-skel-chown root:root \
    --fs-skel-dir "hosts/${host}/root" \
    --packages "${pkgs}" \
    --repositories-file /etc/apk/repositories \
    --timezone 'Canada/Eastern' \
    --script-chroot \
    "${rootfs}" common_setup.sh

  rm -f "${myinitramfs}"
  mkdir -p "${out}"
  (cd "${rootfs}" && doas find . -path ./boot -prune -o -print | doas cpio -o -H newc | zstd -o "${myinitramfs}")
  cp "${rootfs}"/boot/*-ucode.img "${out}"
}

_install() {
  doas mkdir -p "${efi_cur}" "${efi_prev}"
  doas cp "${efi_cur}"/* "${efi_prev}"
  doas cp "${out}"/* "${efi_cur}"
}

_rollback() {
  doas mkdir -p "${efi_cur}" "${efi_prev}"
  doas cp "${efi_prev}"/* "${efi_cur}"
}

usage() {
    cat >&2 <<EOF
Usage: $0 -v <version> [-h <host>] command

Commands:
  build: build alpine image
  config: run linux kernel menuconfig
  latest: query latest upstream linux kernel version
EOF
}

while getopts h:v: flag
do
  case "${flag}" in
    h) host="${OPTARG}" ;;
    v) version="${OPTARG}" ;;
    ?) usage; exit 1 ;;
    *) ;;
  esac
done
shift $((OPTIND - 1))

thishost="$(hostname)"
: "${host:=${thishost}}"
KCFLAGS="${KCFLAGS:-} -O3 -pipe"
if test "${host}" = "${thishost}"; then
  KCFLAGS="${KCFLAGS} -march=native"
fi

efi_cur=/boot/efi/EFI/myalpine_cur
efi_prev=/boot/efi/EFI/myalpine_prev

host_pkgs="hosts/${host}/packages.txt"

build="${HOME}/.cache/myalpineuki/${host}/build"
rootfs="${build}/rootfs"
linux_src="${build}/linux-stable"

obj="${build}/obj"
fw_dest="${build}/siva_uncompressed_firmware"
bzImage="${obj}/arch/x86/boot/bzImage"
# NOTE: use vmlinuz-edge in case a newer custom kernel breaks
#bzImage="${rootfs}/boot/vmlinuz-edge"

out="${HOME}/.cache/myalpineuki/${host}/out"
myinitramfs="${out}/myinitramfs"

case "$1" in
  build) build_kernel; build_initramfs; ls -alh "${out}" ;;
  kernel) build_kernel ;;
  initramfs) build_initramfs ;;
  install) _install ;;
  rollback) _rollback ;;
  latest) query_latest_version ;;
  config) _MYKERNELMAKE menuconfig ;;
  *) usage; exit 1 ;;
esac
